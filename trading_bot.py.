import requests
import time
import datetime
import pytz
import numpy as np
from sklearn.linear_model import LinearRegression

# API keys (Replace with your valid keys)
EXCHANGE_RATE_API_KEY = "your_exchange_rate_api_key"
COINMARKETCAP_API_KEY = "your_coinmarketcap_api_key"

# Function to test API connectivity
def test_api(url):
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"❌ API Error: {e}")
        return False

# Fetch all cryptocurrencies from CoinGecko
def get_all_cryptos():
    url = "https://api.coingecko.com/api/v3/coins/list"
    
    if not test_api(url):
        return []

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return [crypto['id'] for crypto in data]
    except requests.exceptions.RequestException as e:
        return f"Error: {e}"

# Function to fetch cryptocurrency prices
def get_crypto_price(crypto):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto}&vs_currencies=usd"
    
    if not test_api(url):
        return "API Unreachable"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data.get(crypto, {}).get('usd', 'N/A')
    except requests.exceptions.RequestException as e:
        return f"Error: {e}"

# Fetch all Forex pairs dynamically (Example base currencies)
FOREX_BASE_CURRENCIES = ["USD", "EUR", "GBP", "JPY", "AUD", "CAD", "CHF", "NZD"]
FOREX_TARGET_CURRENCIES = ["USD", "EUR", "GBP", "JPY", "AUD", "CAD", "CHF", "NZD", "KES", "ZAR"]

def get_forex_price(base_currency, target_currency):
    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_RATE_API_KEY}/pair/{base_currency}/{target_currency}"
    
    if not test_api(url):
        return "API Unreachable"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data.get("conversion_rate", "N/A")
    except requests.exceptions.RequestException as e:
        return f"Error: {e}"

# AI Model to predict market trends using Linear Regression
class TradingAI:
    def __init__(self):
        self.model = LinearRegression()
        self.data = []  # Stores past price movements
    
    def train(self, prices):
        if len(prices) < 10:
            return "Not enough data to train."
        
        X = np.array(range(len(prices))).reshape(-1, 1)
        y = np.array(prices)
        self.model.fit(X, y)
    
    def predict(self):
        if len(self.data) < 10:
            return "Insufficient data for prediction"
        
        future_x = np.array([[len(self.data)]])
        return self.model.predict(future_x)[0]

# Get best trading time based on time zone
def get_best_trading_time(timezone):
    now = datetime.datetime.now(pytz.timezone(timezone))
    if now.hour < 6:
        return "Best time to trade: 6 AM - 12 PM"
    elif now.hour < 12:
        return "Best time to trade: 12 PM - 6 PM"
    elif now.hour < 18:
        return "Best time to trade: 6 PM - 12 AM"
    else:
        return "Best time to trade: 12 AM - 6 AM"

# Initialize AI and get all assets
trading_ai = TradingAI()
all_cryptos = get_all_cryptos()
forex_pairs = [(base, target) for base in FOREX_BASE_CURRENCIES for target in FOREX_TARGET_CURRENCIES if base != target]

# Fetch Cryptocurrency Prices and Train AI
print("\n=== Cryptocurrency Market ===")
for crypto in all_cryptos[:20]:  # Limiting to top 20 for performance
    price = get_crypto_price(crypto)
    print(f"{crypto.capitalize()}: ${price}")

# Fetch Forex Rates
print("\n=== Forex Market ===")
for base, target in forex_pairs[:20]:  # Limiting to top 20 for performance
    rate = get_forex_price(base, target)
    print(f"{base}/{target}: {rate}")

# AI Prediction
print("\n=== AI Trading Predictions ===")
predicted_price = trading_ai.predict()
if isinstance(predicted_price, str):
    print(predicted_price)
else:
    print(f"AI Prediction: ${predicted_price:.2f}")

# Get best trading time based on user timezone
user_timezone = "America/New_York"  # Change based on user location
print(f"\n⏰ {get_best_trading_time(user_timezone)}")
